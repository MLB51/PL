
1. LEX {
    lex ___.l  ->   ___.yy.c
    produce el analizador lexico
    el .l tiene la siguiente estructura {
        definiciones 
            - puede haber codigo: %{ code %}
            - puede haber definiciones con regex: D [0-9]
        %%
        expresiones regulares - acciones
            - "-"                {return ret(opas);}
            - {D}+(\.){D}+       {return ret(numreal);}
        %%
        código
            - cualquier codig extra que se quiera tener
            - por ejemplo el main o gestion de errores
    }

    si una cadena se puede reconocee por 2 regex tiene prioridad la primera
    siempre coge la cadena mas larga que entre como token
    la ult regex es para coger cualquier char que no sea bueno y lanza error
    yylex()  que se genera es el analizador

}

2. YACC {
    bison -d ___.y  ->  ___.tab.c
    produce el analizador sintactico ascendente 
    el .y tiene la siguiente struct {
        definiciones de tokens, código auxiliar
            - codigo igual que en .l
            - tokens definidos como: %token coma pyc...
        %%
        reglas - acciones
            - reglas de la gramatica con notacion similar a la ETDS
            - mirar sintaxis en pdf mejor
        %%
        código
            - codigo necesario como main y yyerror
    }

    yyparse es el analizador sintactico
    

}
